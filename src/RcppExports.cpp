// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// S2CapFromAxisHeight
List S2CapFromAxisHeight(NumericVector axis, double height);
RcppExport SEXP _s2_S2CapFromAxisHeight(SEXP axisSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(S2CapFromAxisHeight(axis, height));
    return rcpp_result_gen;
END_RCPP
}
// S2Cap_contains_point
LogicalVector S2Cap_contains_point(NumericMatrix points, List cap);
RcppExport SEXP _s2_S2Cap_contains_point(SEXP pointsSEXP, SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< List >::type cap(capSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Cap_contains_point(points, cap));
    return rcpp_result_gen;
END_RCPP
}
// S2Cap_area
double S2Cap_area(List cap);
RcppExport SEXP _s2_S2Cap_area(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type cap(capSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Cap_area(cap));
    return rcpp_result_gen;
END_RCPP
}
// S2Cap_GetRectBound
List S2Cap_GetRectBound(List x);
RcppExport SEXP _s2_S2Cap_GetRectBound(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Cap_GetRectBound(x));
    return rcpp_result_gen;
END_RCPP
}
// S2CellIdFromLatLng
List S2CellIdFromLatLng(NumericMatrix x, IntegerVector level);
RcppExport SEXP _s2_S2CellIdFromLatLng(SEXP xSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(S2CellIdFromLatLng(x, level));
    return rcpp_result_gen;
END_RCPP
}
// S2CellIdFromPoint
List S2CellIdFromPoint(NumericMatrix x, IntegerVector level);
RcppExport SEXP _s2_S2CellIdFromPoint(SEXP xSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(S2CellIdFromPoint(x, level));
    return rcpp_result_gen;
END_RCPP
}
// S2CellId_ToPoint
NumericMatrix S2CellId_ToPoint(List x);
RcppExport SEXP _s2_S2CellId_ToPoint(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2CellId_ToPoint(x));
    return rcpp_result_gen;
END_RCPP
}
// S2CellId_ToString
CharacterVector S2CellId_ToString(std::vector<std::string> x);
RcppExport SEXP _s2_S2CellId_ToString(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2CellId_ToString(x));
    return rcpp_result_gen;
END_RCPP
}
// S2Cell_vertices_from_token
List S2Cell_vertices_from_token(std::vector<std::string> tokens);
RcppExport SEXP _s2_S2Cell_vertices_from_token(SEXP tokensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tokens(tokensSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Cell_vertices_from_token(tokens));
    return rcpp_result_gen;
END_RCPP
}
// S2Cell_vertices_from_point
List S2Cell_vertices_from_point(NumericMatrix mat, int level);
RcppExport SEXP _s2_S2Cell_vertices_from_point(SEXP matSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Cell_vertices_from_point(mat, level));
    return rcpp_result_gen;
END_RCPP
}
// S2Cell_grid_centers
NumericMatrix S2Cell_grid_centers(int level);
RcppExport SEXP _s2_S2Cell_grid_centers(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Cell_grid_centers(level));
    return rcpp_result_gen;
END_RCPP
}
// S2Covering_internal
List S2Covering_internal(List x, std::string type, int max_cells, int min_level, int max_level, bool interior);
RcppExport SEXP _s2_S2Covering_internal(SEXP xSEXP, SEXP typeSEXP, SEXP max_cellsSEXP, SEXP min_levelSEXP, SEXP max_levelSEXP, SEXP interiorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type max_cells(max_cellsSEXP);
    Rcpp::traits::input_parameter< int >::type min_level(min_levelSEXP);
    Rcpp::traits::input_parameter< int >::type max_level(max_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type interior(interiorSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Covering_internal(x, type, max_cells, min_level, max_level, interior));
    return rcpp_result_gen;
END_RCPP
}
// S2LatLngRect
List S2LatLngRect(NumericVector lo, NumericVector hi);
RcppExport SEXP _s2_S2LatLngRect(SEXP loSEXP, SEXP hiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lo(loSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hi(hiSEXP);
    rcpp_result_gen = Rcpp::wrap(S2LatLngRect(lo, hi));
    return rcpp_result_gen;
END_RCPP
}
// S2LatLngRect_area
double S2LatLngRect_area(List x);
RcppExport SEXP _s2_S2LatLngRect_area(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2LatLngRect_area(x));
    return rcpp_result_gen;
END_RCPP
}
// S2Point_interpolate
NumericMatrix S2Point_interpolate(NumericMatrix x, double eps);
RcppExport SEXP _s2_S2Point_interpolate(SEXP xSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Point_interpolate(x, eps));
    return rcpp_result_gen;
END_RCPP
}
// S2PolygonBuild
List S2PolygonBuild(List x, bool validate, bool xor_edges, double vertex_merge_radius, double edge_splice_fraction, bool undirected_edges);
RcppExport SEXP _s2_S2PolygonBuild(SEXP xSEXP, SEXP validateSEXP, SEXP xor_edgesSEXP, SEXP vertex_merge_radiusSEXP, SEXP edge_splice_fractionSEXP, SEXP undirected_edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type validate(validateSEXP);
    Rcpp::traits::input_parameter< bool >::type xor_edges(xor_edgesSEXP);
    Rcpp::traits::input_parameter< double >::type vertex_merge_radius(vertex_merge_radiusSEXP);
    Rcpp::traits::input_parameter< double >::type edge_splice_fraction(edge_splice_fractionSEXP);
    Rcpp::traits::input_parameter< bool >::type undirected_edges(undirected_edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(S2PolygonBuild(x, validate, xor_edges, vertex_merge_radius, edge_splice_fraction, undirected_edges));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygon_union
List S2Polygon_union(List x, List y);
RcppExport SEXP _s2_S2Polygon_union(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygon_union(x, y));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygon_intersection
List S2Polygon_intersection(List x, List y);
RcppExport SEXP _s2_S2Polygon_intersection(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygon_intersection(x, y));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygons_intersection
List S2Polygons_intersection(List x, List y);
RcppExport SEXP _s2_S2Polygons_intersection(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygons_intersection(x, y));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygons_intersect
List S2Polygons_intersect(List x, List y);
RcppExport SEXP _s2_S2Polygons_intersect(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygons_intersect(x, y));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygons_centroid
NumericMatrix S2Polygons_centroid(List x);
RcppExport SEXP _s2_S2Polygons_centroid(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygons_centroid(x));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygons_area
NumericVector S2Polygons_area(List x);
RcppExport SEXP _s2_S2Polygons_area(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygons_area(x));
    return rcpp_result_gen;
END_RCPP
}
// S2Polygon_contains_point
LogicalVector S2Polygon_contains_point(NumericMatrix points, List poly, bool approx);
RcppExport SEXP _s2_S2Polygon_contains_point(SEXP pointsSEXP, SEXP polySEXP, SEXP approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< List >::type poly(polySEXP);
    Rcpp::traits::input_parameter< bool >::type approx(approxSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polygon_contains_point(points, poly, approx));
    return rcpp_result_gen;
END_RCPP
}
// S2Polyline_dist
NumericVector S2Polyline_dist(NumericMatrix line, NumericMatrix x);
RcppExport SEXP _s2_S2Polyline_dist(SEXP lineSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type line(lineSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(S2Polyline_dist(line, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_s2_S2CapFromAxisHeight", (DL_FUNC) &_s2_S2CapFromAxisHeight, 2},
    {"_s2_S2Cap_contains_point", (DL_FUNC) &_s2_S2Cap_contains_point, 2},
    {"_s2_S2Cap_area", (DL_FUNC) &_s2_S2Cap_area, 1},
    {"_s2_S2Cap_GetRectBound", (DL_FUNC) &_s2_S2Cap_GetRectBound, 1},
    {"_s2_S2CellIdFromPoint", (DL_FUNC) &_s2_S2CellIdFromPoint, 2},
    {"_s2_S2CellIdFromLatLng", (DL_FUNC) &_s2_S2CellIdFromLatLng, 2},
    {"_s2_S2CellId_ToPoint", (DL_FUNC) &_s2_S2CellId_ToPoint, 1},
    {"_s2_S2CellId_ToString", (DL_FUNC) &_s2_S2CellId_ToString, 1},
    {"_s2_S2Cell_vertices_from_token", (DL_FUNC) &_s2_S2Cell_vertices_from_token, 1},
    {"_s2_S2Cell_vertices_from_point", (DL_FUNC) &_s2_S2Cell_vertices_from_point, 2},
    {"_s2_S2Cell_grid_centers", (DL_FUNC) &_s2_S2Cell_grid_centers, 1},
    {"_s2_S2Covering_internal", (DL_FUNC) &_s2_S2Covering_internal, 6},
    {"_s2_S2LatLngRect", (DL_FUNC) &_s2_S2LatLngRect, 2},
    {"_s2_S2LatLngRect_area", (DL_FUNC) &_s2_S2LatLngRect_area, 1},
    {"_s2_S2Point_interpolate", (DL_FUNC) &_s2_S2Point_interpolate, 2},
    {"_s2_S2PolygonBuild", (DL_FUNC) &_s2_S2PolygonBuild, 6},
    {"_s2_S2Polygon_union", (DL_FUNC) &_s2_S2Polygon_union, 2},
    {"_s2_S2Polygon_intersection", (DL_FUNC) &_s2_S2Polygon_intersection, 2},
    {"_s2_S2Polygons_intersection", (DL_FUNC) &_s2_S2Polygons_intersection, 2},
    {"_s2_S2Polygons_intersect", (DL_FUNC) &_s2_S2Polygons_intersect, 2},
    {"_s2_S2Polygons_centroid", (DL_FUNC) &_s2_S2Polygons_centroid, 1},
    {"_s2_S2Polygons_area", (DL_FUNC) &_s2_S2Polygons_area, 1},
    {"_s2_S2Polygon_contains_point", (DL_FUNC) &_s2_S2Polygon_contains_point, 3},
    {"_s2_S2Polyline_dist", (DL_FUNC) &_s2_S2Polyline_dist, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_s2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
